{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"eval",
				"sec:eval:storage"
			],
			[
				"proxy",
				"sec:eval:performance:proxy"
			],
			[
				"rejun",
				"sec:arch:image_rejuvenation"
			],
			[
				"ar",
				"sec:arch:selective_replay"
			],
			[
				"be",
				"beforeSize	statement"
			],
			[
				"to",
				"toString"
			],
			[
				"foot",
				"footPrint"
			],
			[
				"DA",
				"DATA_DIRECTORY	statement"
			],
			[
				"OU",
				"OUTPUT_DIRECTORY	statement"
			],
			[
				"on",
				"onlyfiles	statement"
			],
			[
				"ti",
				"timeParts"
			],
			[
				"out",
				"outputDir	statement"
			],
			[
				"fNa",
				"fNameParts	statement"
			],
			[
				"json",
				"json_file	statement"
			],
			[
				"pr",
				"println"
			],
			[
				"item",
				"itemize"
			],
			[
				"er",
				"enumerate"
			],
			[
				"enu",
				"enumerate"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "%!TEX root = ../tese.tex\n%!TEX encoding = UTF-8 Unicode\n\n\\chapter{The Shuttle Architecture}\n\\label{chapter:architecture}\nThis chapter describes the overall system architecture of Shuttle and outlines its central functional components. The main design goal is to help \\acf{CSP} customers to recover from intrusions in their applications deployed in \\acf{PaaS}. We consider three actors: the \\acf{CSP}, which provides the platform, the \\emph{tenants}, whose deploy their applications in the platform, and the \\emph{users}, whose access the applications. Shuttle is a service designed to be offered by a \\ac{CSP}.\n\nWe introduce the main requirements in Section \\ref{sec:arch:requirements} and describe a generic \\acf{PaaS} architecture in Section \\ref{sec:arch:paas}. The remaining sections describe the architecture of Shuttle and discuss the main design choices. \\hl{mais info aqui?}\\\\\n\n\\section{Requirements}\n\\label{sec:arch:requirements}\nThis thesis addresses the problem of providing an intrusion recovery service for applications deployed in \\acf{PaaS}. Our overall goal is to \\textit{make \\ac{PaaS} applications operational despite intrusions}. \\hl{também me dá essa ideia mas é porque saltamos o capitulo 2, o paragrafo ficou aqui para relembrar e re-introduzir o leitor ao objectivo} More precisely, we aim to create a service, named Shuttle, to help \\ac{PaaS} tenants to recover from the following problems in their applications:\n\\begin{itemize}\n\\item \\textit{Software vulnerabilities:} non-authorized users compromise state by exploiting software vulnerabilities that allow invalid requests to be executed.\n\\item \\textit{Malicious or accidentally corrupted requests:} users, authorized or not, compromise the application state accidentally or intentionally issuing valid requests.\n\\end{itemize} \n\n\n\n\n%attack example\nFor instance, two common attacks that can be used to compromise application state consist in: (1) attackers stealing valid users' credentials and using them to access their data; and (2) doing a \\ac{SQL} Injection attack by mixing \\ac{SQL} meta-characters with normal input and doing otherwise invalid queries to the database. Both attacks can be performed using apparently valid requests. Consequently, many prevention mechanisms fail to block them.\n\nIn order to achieve the above goals, the service shall meet the following requirements: \n\\begin{itemize}\n\\item \\textit{Remove intrusion effects:} Remove corrupted data at file system, database and application levels in the application containers and update affected legitimate actions. \\hl{exacto, consigo lidar sim com o sistema de ficheiro, que é o estado persistente do sistema operativo porque re-instacio a aplicação.}\n\\item \\textit{Remove selected malicious actions:} Help tenant to track the intrusion producing the set of actions affected by an externally provided list of malicious actions.\n\\item \\textit{Support software update:} After recovery, the application state has to be compliant with the new version of the software.\n\\item \\textit{Recover without stopping the application:} Recover the application without exposing users to application downtime. \\hl{sim, na prática este objectivo não foi conseguido a 100\\% mas, mesmo que o juri me dê nas orelhas, acho que aqui devo ter os objectivos ideais do projecto sem ajustá-los ao que consegui}\n\\item \\textit{Determinism:} Despite concurrent re-execution of requests, the result of re-execution is the same as the result of first execution if the application source code and requests remain equal.\n\\item \\textit{Low runtime overhead:} The recording of operations or state for recovery purposes should have a negligible impact in the runtime performance.\n\\item \\textit{\\acs{NoSQL} database snapshot:} \\acs{NoSQL} databases will have to be extended to support database snapshots, in order to reduce the recovery time.\n\\item \\textit{\\ac{PaaS} integration:} The source code of the application shall remains unmodified as much as possible. \\ac{PaaS} developers do not need to install or configure Shuttle. Shuttle is built in a generic manner and it is reused in each deployed application.\n\\end{itemize}\n\nShuttle shall \\textit{support software updates} to prevent future intrusions and allow operators to try new configurations or software versions without effects in the application behavior perceived by users. \n\n\n\\section{Platform as a Service}\n\\label{sec:arch:paas}\n\\acf{PaaS} is a cloud computing model for automated configuration and deployment of applications onto the cloud infrastructure \\cite{Vaquero2008,Vaquero2011,Armbrust,Mell}. \\ac{PaaS} enables developers to develop and deploy web applications into production fast by abstracting many details of the underlying infrastructure. Developers access the infrastructure resources, such as storage, through a set of services. These services are often pay-per-usage. \\ac{PaaS} provides a deployment environment for a set of languages. \n\n%Bottom-layer: IaaS, VMs\nApplications are deployed in one or more application servers, e.g., Java Tomcat or Javascript NodeJS. \\emph{Containers} \\cite{Lenk2009} hold these application servers and provide the required isolation level between the various applications. The word container is often used to refer to lightweight in-kernel resource (CPU, memory and device) accounting, allocation and isolation mechanisms like the \\textit{Linux control groups} \\cite{Menage2007}. These mechanisms isolate the process, network and file system used by applications that share the same operating system. They can run either directly on the host operating system or in a virtual machine. In this document, we use the word \\textit{container or instance} to describe an isolated deployment unit that can be allocated from a resource pool by an orchestration engine. The deployment unit is created using an image and has storage attached. Therefore, our concept of container includes not only \\textit{Linux control groups} like systems but also bare metal servers and guest operating systems running on top of hyper-visors, e.g., Xen \\cite{xen}, KVM \\cite{kvm}. Containers are managed directly or through an orchestration or IaaS system (e.g., OpenStack \\cite{openstack}, \\ac{AWS} \\ac{EC2} \\cite{aws}, Eucalyptus \\cite{eucalyptus}, Omega \\cite{omega}). Containers have one or more associated storage. When the container loads up, it loads an image onto its storage. The image contains, at least, the operating system and the \\ac{PaaS} system in order to deploy the application in the container. \n\n%Components\nIn order to let Shuttle as generic as possible, we consider the following components of a minimal \\ac{PaaS} architecture (Figure \\ref{fig:paasArchitecture}):\n\\begin{itemize}\n\\item \\textbf{Load balancer:} Routes user requests based on application location and container load.\n\\item \\textbf{Instance controller:} Collects the container metering data and performs the configuration, tear-up and tear-down of containers in the instance.\n\\item \\textbf{Cloud controller:} Manages the tear-up and tear-down of containers.\n\\item \\textbf{Metering and billing}: Retrieves the metering data from each container. The load balancer uses this information to perform request routing while the cloud controller automatically decides when to scale.\n\\item \\textbf{Containers:} The isolated environment where applications run.\n\\item \\textbf{Cloud Instances:} The guest operating systems or bare-metal machine where the containers run.\n\\item \\textbf{Authentication manager:} Provides user and system authentication.\n\\item \\textbf{Database instance:} A single \\ac{DBMS} shared, or not, between multiple applications. Most of database middleware are built-on multiple containers to provide scalability and replication.\n\\item \\textbf{Authentication manager:} Provides user and system authentication.\n\\end{itemize}\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=100mm]{images/paas}\n\\caption{Generic \\ac{PaaS} architecture}\n\\label{fig:paasArchitecture}\n\\end{figure}\n\n\\acf{CSP} also deploy the database management systems in containers. Their data is accessed as a service by the developers. Most of the applications deployed in \\ac{PaaS} are designed to scale horizontally, i.e., to scale adding more containers. Therefore, the database and/or the session cookies often maintain the application state. The \\ac{PaaS} systems are often integrated with code repositories and software development tools reducing the time deploy of applications in cloud environments. Users may access the website connecting to the load balancer via \\ac{HTTPS}, which will decrypt the \\ac{SSL} session and forward the unencrypted requests to application containers. As the traffic increases, the load balancer may become a performance bottleneck if the system does not provide enough resources to handle the user traffic.\\\\\n\nWe assume applications to store their persistent state only in databases. Shuttle's architecture can be extended to encompass object storage, for instance \\acf{AWS} \\ac{S3}. We do not consider a possible state stored in the filesystem because \\ac{PaaS} applications are supposed to be scalable, thus the instances file system is frequently destroyed.\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\FloatBarrier\n\\section{Shuttle Overview}\n\\label{sec:arch:overview}\nShuttle is an intrusion recovery service for \\ac{PaaS}. It recovers from intrusions on software domain due to software flaws, corrupted requests, input mistakes and corrupted data in \\ac{PaaS} containers (Section \\ref{sec:arch:paas}). While previous works (Chapter \\ref{chapter:related_work}) aimed to recover applications supported by a single database, Shuttle targets \\ac{PaaS} applications deployed in multiple instances and backed by \\acs{NoSQL} databases. Since typical \\ac{PaaS} applications are designed to support high usage loads, our main contribution is a scalable intrusion recovery service that is transparent for application developers. \n\n%Summary\nShuttle is an automatic recovery mechanism based on the record-and-replay approach. Applications supported by Shuttle can operate in one of two states: \\textit{normal execution} and \\textit{recovery}. During \\emph{normal execution}, Shuttle records the data required to recover the application afterward: it does periodic database snapshots, logs user requests and database operations. When an intrusion is identified, tenants use Shuttle to recover their applications staring the recovery phase.\n\nThe processes described in Section \\ref{chapter:related_work} lead us to define \\textit{how to remove the intrusion effects} and \\textit{how to recover a consistent state}. During the \\emph{recovery phase}, Shuttle removes the intrusion effects creating a branch of the system execution in which it loads a snapshot that contains an application state before the intrusion began. It builds a consistent state replaying (re-executing), in the new branch, the legitimate requests logged during the \\emph{normal execution}, performing either full or selective replay (Section \\ref{sec:arch:selective_replay}). In the meantime, the incoming requests are executed in the previous branch. When ready, it sets the new branch as the single execution branch. \\\\\n\n\n\n%PaaS\nShuttle aims to be integrated by \\acf{CSP} into their \\ac{PaaS} architecture as a novel service. Services provided in \\ac{PaaS} are expected to be well-tested and available without setup because they are offered by \\ac{CSP} and shared by multiple tenants. Our approach hides the Shuttle implementation and operation within the database and load-balancing \\ac{PaaS} services. Shuttle components can be shared by multiple clients but the data of each client remains isolated. For sake of simplicity, we present Shuttle considering a single tenant implementation.\n\nWe consider a minimal \\ac{PaaS} architecture to let Shuttle as generic as possible. We consider a client-server model in which clients access applications using the \\ac{HTTP} protocol \\footnote{Shuttle also supports HTTPS by ending the connections at the proxy.}. \\ac{HTTP} requests are received by a load balancer that forwards them to web/application servers, which access a shared database. {PaaS} components are represented with solid line in Figure \\ref{fig:shuttle_architecture}, while Shuttle components are represented with dashed line. \\ac{PaaS} platforms with Shuttle have the following components:\n\n\\begin{itemize}\n  \\item \\textit{Proxy:} Logs every \\ac{HTTP} user requests, adds an unique mark to its header and forwards it to the load balancer. The proxy functionality might be part of the load balancer but conceptually it is a different component.% and currently it is also implemented separately.\n  \\item \\textit{Load balancer:} Routes requests to different application servers taking into account their load (part of the \\ac{PaaS} platform).\n  \\item \\textit{Application servers:} The application (or web) servers are the components of the \\ac{PaaS} platform that run the application logic. This logic uses a library to access the database service. Shuttle uses a \\textit{database client interceptor} mechanism in this library to log the data items accessed per request.\n  \\item \\textit{Database instances:} A set of database servers used to store the application persistent state. Shuttle includes in each instance  a \\textit{database proxy} that logs the requests that accessed each data item and determines the dependencies between requests.\n  \\item \\textit{Shuttle storage:} A scalable storage component that stores requests, responses and metadata.\n  \\item \\textit{Manager:} Retrieves dependencies and coordinates the recovery process. \n  \\item \\textit{Replay instances:} A set of \\ac{HTTP} clients that read previously executed requests from the Shuttle storage and invoke the application servers to re-execute the requests during the recovery process. The manager coordinates the worker instances.\n  \\end{itemize}\n\n  \\begin{figure}\n  \\centering\n  \n  architectureWithout\n  \\includegraphics[width=90mm]{images/architectureTiers}\n  \\caption[Shuttle service architecture]{Shuttle service architecture: The dashed line components are part of the \\ac{PaaS} architecture. The proxy logs the user requests into the Shuttle storage. The manager coordinates the recovery process where the replay instances replay the user requests.}\n  \\label{fig:shuttle_architecture}\n  \\end{figure}\n\n\n  architectureWithout\n\n%Shuttle Storage\nThe \\emph{Shuttle storage} keeps the content of the user requests and responses. Although we do not consider this aspect in the architecture, this store can be replicated to a remote site to allow tolerating catastrophic failures in a datacenter.\n\n\n%trusted computing base\nWe consider the Shuttle components to be part of the trusted computing base since their integrity and availability are critical to recover the application. We assume that intrusions tamper the application data, which is stored in the database, not the snapshots nether the stored requests. \n\n%Database\nUnlike previous works, our design encompasses distributed databases (\\acs{NoSQL}). These databases are designed to scale horizontally. Therefore, Shuttle can also be scaled by adding more database instances.\n\n%How the architecture fits the PaaS\nPaaS offerings are supported by a computing infrastructure, often provided as a service (IaaS model), able to scale the application allocating new instances on-demand or automatically, to maintain the quality of service despite demand oscillations. This elasticity  allows allocating replay instances and to scale the application to attend the requests issued by them during the recovery process. Due to the common pay-per-usage model, these resources are paid only when a recovery process occurs. The remaining cost of the service comes from storing client requests and database snapshots. Our design aims to optimize the available resources to reduce the recovery period and costs. \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Normal Execution}\n\\label{sec:arch:normal_execution}\nShuttle logs the data it needs to recover applications during the normal execution phase: user \\ac{HTTP} requests, application \\ac{HTTP} responses, database items accessed by each request and sequence of operations to each database item (Figure \\ref{fig:normal_execution}). In this section, we describe the normal execution phase following the path that a request takes to be processed.\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=110mm]{images/normalExecution}\n\\caption{Interaction between components during the normal execution}\n\\label{fig:normal_execution}\n\\end{figure}\n\n\\hl{Coloco subcapitulos ou não justifica?}\n%Proxy\nThe proxy intercepts all user \\ac{HTTP} requests, except those to static contents (e.g., images), and adds a new header field named \\acf{SRD}. Each \\ac{SRD} contains three subfields: \\acf{RID}, which is an unique timestamp; \\emph{Branch} and \\emph{Snapshot}, which define, respectively, the database branch and snapshot (Section \\ref{sec:arch:snapshot}) and a \\emph{restraint} flag, which is used to support runtime recovery (Section \\ref{sec:arch:runtime_recovery}). \n\nThe proxy also intercepts every application response, associates the response with the original request and adds a new timestamp to track the ending of the request execution. Requests, responses and their timestamps are stored in the \\emph{Shuttle Storage} using asynchronous I/O, which permits the operations to proceed before the transmission has finished. \n\nRequests are sent to the load balancer, which forwards the requests through the application instances according to their usage.\n\n\n%Application instance\nThe application instances invoke the database service using the database client library. The database client library intercepts the operations, logs the accessed data items per request and stores this information in the \\emph{Shuttle Storage}. The database invocation is tracked at client side because the database may not be available or operations may fail.\n\n%Database\nOn each database instance, the database proxy logs the operations' \\ac{RID} and type. The sequence of operations to a data item defines its \\emph{operation list}. Periodically, each database instance iterates the operation list of every data item to establish the dependencies between requests. Shuttle also performs snapshots periodically. The snapshot operation stores a new version of data item on the next write operation (Section \\ref{sec:arch:snapshot}).\n\n\n%Summary\nIn summary, every request-response pair is timestamped and logged by the proxy, the application instances the accessed data items per request, the database logs the sequence of operations per data item. The sequence of operations of each data item is kept in the database instance in which the data item is stored. The remaining data is stored in the \\emph{Shuttle Storage}, which can be located, or replicated, in a remote site to prevent catastrophic disasters rebuilding the application state using the requests and a previous snapshot. The manager retrieves, asynchronously, the requests' start and end timestamps, which are sent by the proxy, and their dependencies, which are collected by the database instances. Shuttle uses the information retrieved to generate the request dependency graph (Section \\ref{sec:arch:dependencies}).\n\n\n\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Recovery}\n\\label{sec:arch:recovery}\n%how we will recover?\nThe intrusion recovery process consists of three steps. The first step concerns the intrusion detection, in which tenants detect intrusions, suspicious behaviors or software flaws. Tenants may use automated tools as \\acf{IDS} \\cite{itdb} to detect intrusions. The second step is vulnerability management in which vulnerabilities are identified, classified and mitigated. This work assumes that tenants identify the malicious requests (the subsequence of actions $A_{intrusion}$ whereby the attacker compromises the application) correctly and modify or remove them. Alternatively, tenants can provide an updated and vulnerability-free software version (Section \\ref{sec:arch:detection}).\nIn addition, Shuttle provides several methods to help tenants to identify the malicious requests: determine set of requests that accessed a set of affected database entries  after an estimated intrusion moment; group requests by user-session; compare database versions to check if the vulnerabilities are correctly mitigated (Section \\ref{sec:arch:system_admin_support}). \n\nThe third step consists in removing the intrusion effects. Intrusions affect the application integrity, confidentiality and/or availability (Section \\ref{sec:related:recovery}). To recover from confidentiality violations is out of the scope of this document. However, we argue that the design of the applications should encompass cryptography techniques which may reduce data relevance and protect the data secrecy \\cite{Maheshwari2000}.\nShuttle aims to recover applications from integrity violations, which often harm the availability. Shuttle can accomplish some of the goals of intrusion tolerance, keeping the application availability. Applications can keep providing a, possibly degraded but adequate, service during the intrusion recovery. Incoming requests are executed while the recovery process occurs without externalization to users (Section \\ref{sec:arch:runtime_recovery}). In addition, Shuttle reduces the system downtime by reducing the time to recover when intrusions happen. Shuttle does not replaces the intrusion prevention, detection and tolerance mechanisms, which are the lines of defense against attacks. \\hl{este paragrafo secalhar deveria ir para o overview} \\\\\n\nIn order to remove the intrusion effects, Shuttle loads a database snapshot, which is selected by the tenant. The selected snapshot shall be previous to the intrusion moment in order to replace the value of every data item by a non-tampered value. Shuttle \\textit{manager} orders the \\ac{PaaS} controller to launch a new set of application instances and deploys an updated source code version, which may include code fixes. Then, the manager orders the database instances to load the selected snapshot (Section \\ref{sec:arch:image_rejuvenation}). The application is intrusion-less now that the snapshot is previous to the intrusion and the application is redeployed on new instances. \n\nAfter, the manager initiates a set of \\textit{replay instances} to replay the legitimate requests of the sequence of legitimate actions that happen after the snapshot, $A-A_{snapshot}-A_{intrusion}$. The replay instances retrieve a list of requests to replay and get the requests \\ac{HTTP} package from the \\emph{Shuttle Storage} (Figure \\ref{fig:replay_execution}). Most of \\ac{PaaS} systems scale automatically and horizontally, i.e., they increment or decrement the number of containers based on the measurements of the containers usage. Therefore, the application-logic and data tiers scale to attend the requests from the replay instances, increasing the recovery speed.\n\nThe database separates the versions used by the replayed requests and the new requests, preventing the application from exposing a downtime. After the recovery process, the new requests are also forward to the recovered database version (Section \\ref{sec:arch:runtime_recovery}).\\\\\n\n\nThe main version of Shuttle loads a previous database snapshot and replays every legitimate user request. An algorithm concerning selective replay using taint via replay is introduced in Section \\ref{sec:arch:selective_replay}. \\\\\n\nIn the following sections, we discuss each of key process of the recovery phase in further detail.\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=110mm]{images/replayExecution}\n\\caption{Interaction between components during the recovery process}\n\\label{fig:replay_execution}\n\\end{figure}\n\n\n\n\n\n\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Intrusion and vulnerability correction}\n\\label{sec:arch:detection}\n%how the damage is fixed?\nThe recovery process starts when intrusions are detected or the application software requires an update. Intrusion detection is out of the scope of this work. We assume that tenants, or system operators, detect one or more intrusions with the following sources:\n\n\\begin{enumerate}\n\\item User request (e.g. stolen user session)\n\\item External action: actions not logged by the proxy (e.g. ssh connection to the instances)\n\\end{enumerate}\n\nAttacks may:\n\\begin{enumerate}\n\\item Tamper the database (e.g. adding new entries)\n\\item Tamper the container (e.g. changing the deployed application in the container)\n\\end{enumerate}\n\nShuttle supports the following actions to fix the exploited vulnerabilities:\n\\begin{enumerate}\n\\item Update the application software\n\\item Identify a set of tampered database entries\n\\item Add, modify or remove logged requests\n\\item Launch cleaned database or application server instances\n\\end{enumerate} \n\nShuttle removes these effects of malicious actions redeploying the application in new containers and rolling back the database to a snapshot previous to the intrusion.\n\nAttackers may use external actions to perform the intrusion, for instance gaining control of the instance to modify the database files. These actions are not recorded by Shuttle therefore they are not replayed and the application recovers a consistent state. We analyze several intrusion scenarios in Section \\ref{sec:eval:accuracy}.\\\\\n\n\nIf tenants update the application software, they have to ensure that the application's interface remains compatible with the requests that will be replayed. Alternatively, tenants may update the database data items and provide a script to modify the requests make them compatible with the new \\ac{API}. \n\nIf the database is tampered using user requests, the tenant has to identify the malicious user requests. In addition,tenants can provide the set of suspicious database entries to Shuttle and it will resolve the set of requests that accessed the suspicious items after the estimated intrusion moment. Knowing the suspicious requests, the tenants shall use Shuttle to add, modify or remove the past requests to remove accidental or malicious behaves. \\\\\n\nIn summary, at the beginning of the intrusion recovery process, tenants shall ensure that:\n\\begin{enumerate}\n    \\item The software is correct: previous flaws are fixed, its \\ac{API} is compatible with the requests and its behavior is the expected.\n    \\item The requests, which are selected to replay, are legitimate and their dependencies are correct.\n    \\item The estimated intrusion moment is previous to the intrusion moment (the selected snapshot is intrusion free).\n\\end{enumerate} \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Snapshot}\n\\label{sec:arch:snapshot}\n\\hl{professor, pode enviar pelo menos esta parte do trabalho ao seu colega do brazil para que ele a reveja? quase todos os conceitos deste capitulo estao ligados ao trabalho dele...}\n\n%Why I need a snapshot? To reduce the work during replay.\nShuttle needs to remove intrusions effects. In Section \\ref{sec:related:recovery}, we presented two mechanisms to do so: record the data item values or compensate the malicious actions. The first makes a copy of the data item value at a certain instant $t$, implying more storage resources. The further applies compensating actions to each action over the data item value after the instant $t$, which requires more computation resources to invert every action after $t$. However, the compensation mechanism requires the knowledge of the actions that revert the effects of the malicious actions. Moreover, if a malicious action is not recorded, then compensation mechanisms do not revert its effects. Since the set of operations is unknown and Shuttle aims to remove all intrusion effects, we perform snapshots by recording the value of the database items at a certain instant $t$.\\\\\n\n%What is a snapshot\nA snapshot is a complete set of versions of every data item in the system from which data values can be read but to which updates are not made. Like checkpoints, snapshots save the application persistent state at a certain moment. Unlike the selective undo approach, which only reverts the tainted data items (Section \\ref{sec:arch:selective_replay}), the full replay approach loads a snapshot previous to the intrusion instant. This approach reverts every database item and removes the effects of any action that occurred after the snapshot creation. \\\\\n\n%How it is useful?\nThe duration of the recovery process is mainly defined by the number of requests previous to the intrusion of the set, $A_{before}$. The snapshot mechanism avoids to replay every request from the beginning of the application, which can take too long. Shuttle requires not only a snapshot but also every action posterior to the snapshotting instant. Therefore, Shuttle keeps every user request posterior to the oldest stored snapshotting instant. The snapshot period defines the usage of storage and computation resources. We argue that tenants can balance the costs of storage and computation resources by specifying a policy to perform the snapshot. The policy shall consider the rate of requests, the data written per request, the expected time to detect the failure and the application capability to provide an possible degraded service during the recovery period. \\\\\n\n%What Shuttle needs to do?\nShuttle takes checkpoints automatically and according to specified policies. It records the persistent state of the application, i.e., the database values, at a certain instant. The volatile state of the application, e.g. program stack, is not stored as we consider the web servers to be state-less. \\\\\n\n\n%Request consistent snapshots\nPerforming snapshots in distributed databases is not trivial since snapshots have to be consistent with the user requests.  We consider each user request may include multiple database operations, each of them to multiple database servers, without using transactions. Consequently, the sets of database operations of each user request cannot be aborted and do not have a global order. If Shuttle replays requests on a snapshot that contains part of the persistent state written by a request during its first execution, the replay will be inconsistent. The database must reflect the effects of a set of completed requests and not the results of partially executed requests. Therefore each snapshot shall be \\emph{global request-consistent} containing either all or none of the database updates made by every request.\n\nWe define \\textit{request-consistent global snapshot}: a snapshot is global request-consistent if it records a state of the database which reflects the effect of a set of completed requests and not the results of any partially executed request. This concept extends the definition of \\emph{transaction-consistent global checkpoint}: a checkpoint is a transaction-consistent global checkpoint if it contains all or none of the updates made by a transaction \\cite{global-checkpoint}. Since most of \\acs{NoSQL} databases do not support transactions, we extend the concept of transaction to \\textit{request-transaction}. A request-transaction embraces all database operations performed due to the execution of a request. Unlike \\ac{ACID} transactions, a request-transaction may be not possible to abort.\\\\ \n\n\n\n%Log-oriented vs dump-oriented vs Fuzzy\n\\hl{Justifica fazer aqui uma especie de related work com o log-oriented vs dump-oriented vs fuzzy e explicar protocolos que ja existam? - acho que este paragrafo pode ir para o lixo...} Checkpoint algorithms for distributed databases can be classified as log-oriented and dump-oriented \\cite{checkpoint-survey}. In the dump-oriented approach, the checkpoint is referred to as the process of saving the state of all data items in the database. In the log-oriented approach, periodically a dump of the database is taken and also a marker is saved at appropriate places in the log. When a failure occurs, the latest dump is restored and the operations on the log after the dump was taken is applied to the dump until the marker is reached to restore the database to a consistent state \\cite{global-checkpoint}.\\\\\n\n\nIn addition, the snapshot mechanism shall be non-blocking: the processes shall not stop their execution while taking snapshots.  \n\n%Straightforward solution\nA straightforward way to take a request-consistent global snapshot is to stop processing new requests, waiting until the currently executing requests finish, then making a copy of each data item. However, this solution incurs on communication overhead to reach a globally inactive state and causes application downtime. Yet, this approach may fit applications that can be unavailable during a certain period, for instance, during a certain period of the night. \\\\\n\n\nKim and Park \\cite{kim_checkpoint} propose an approach in which a coordinator broadcasts a checkpoint-request message to every database node. Each database node divides the transactions into two groups: before the checkpoint-request $T_p$ and after $T_f$. Updates of transactions in $T_p$ are flushed to the current database, while the ones in $T_f$ are flushed in a \\emph{checkpoint area}. When all transactions of $T_p$ are done, the checkpoint area is updated with items updated by transactions in $T_p$ but not by $T_f$. After, the rules of current database and checkpoint area are exchanged. The major drawback of this approach comes from updating the checkpoint area.\n\n\n%Our solution\nOur solution leverages the existence of a single load balancer and, consequently, single proxy that adds a \\acf{SRD} field to every request. Every \\ac{SRD} contains a \\ac{RID}, an unique and incremental identification of each request given by the instant when the request is retrieved. Every database operation is identified by the \\ac{RID} of the source user request.\n\nIn order to create a snapshot, tenants define a future instant in time $t$ when the snapshot will occur. The instant, named \\acf{SID}, identifies the request-consistent global snapshot. The manager passes the \\ac{SID} to every database proxy.\n\nDatabase proxies use the \\ac{SID} to define the version of the data item used by the operations. Operations with \\acf{RID} lower than the scheduled snapshot instant (\\ac{RID} < \\ac{SID}) access the version before the snapshot. Otherwise, the operations access the latest data item version. This mechanism splits requests to accomplish a request-consistent global snapshot, and allows tenants to schedule snapshots without application downtime. Figure \\ref{fig:snapshots} illustrates the sequence of 7 database operations on the database item $x$ and 3 snapshots (excluding the base snapshot).\n\n\\begin{figure}\n\\centering\n  \\includegraphics[width=130mm]{images/snapshots}\n  \\caption[Snapshot versions stored in the database]{Versions stored in the database during a sequence of 7 operations and 3 snapshots. The final values of the stored versions are contained in filled squares.}\n\\label{fig:snapshots}\n\\end{figure}\n\nIn order to avoid to replay every database operation to obtain the snapshot, the snapshot mechanism shall create a database copy (dump). We avoid blocking the application to copy the versions using a copy-on-write and incremental method: a new version is created only when the data is written for the first time in each snapshot. Since a data item may not be written in every snapshot, for instance $SID=200$ in Figure \\ref{fig:snapshots}, we associate a \\emph{version list} to every data item. A \\emph{version list} tracks on which snapshots the data item has been written. In conclusion, the snapshot is incremental mechanism because it does not require to duplicate data.\\\\\n%The version list also contains read requests that did not succeeded, for instance when the data item does not exists, to avoid false positives. \n\n\n%Particular case\nA snapshot might become inconsistent. For instance, Table \\ref{tab:snapshot_caso_bicudo} represents the execution of two concurrent requests. Their normal execution is consistent. A snapshot with \\ac{SID}=5 would contain [A1 = 11] and be a global request-consistent. However, if Shuttle loads the snapshot and replays the request 20, its first read operation reads A1 == 11 instead of A1 == 10. \n\n\nThis particular case happens when a request with \\ac{RID} greater than the snapshot instant \\ac{SID} read a version belonging to the snapshot \\ac{SID} and, after, a request with \\ac{RID} lower than \\ac{SID} overwritten that version. \n\nStoring a new version and adding a flag on the version list solve the problem. Nevertheless, we expect this to happen only in rare occasions.\n\n%the  and every operation with \\ac{RID} > \\ac{SID} reads/writes the new version. Operations of requests with \\ac{RID} > \\ac{SID} that read the original value, for instance A = 10, are marked and read the old version during the replay. \n%in parallel during the transition period, i.e., when a request accesses the previous snapshot and other accesses the current snapshot. \n\n\n\\begin{table}\n\\centering\n\\begin{tabular}{l|l|l}\n\\textbf{RID=10 (SID = 1)}     & \\textbf{RID=20 (SID=15)}   & \\textbf{Storage}\\\\ \\hline\nWrite A=10                    & ~                          & A1=10  \\\\\n~                             & Read A: A1==10             & A1=10  \\\\         \n~                             & Write A=20                 & A1=10, A15=20 \\\\\nRead A: A1==10                & ~                          & A1=10, A15=20 \\\\\n~                             & Read A: A15==20            & A1=10, A15=20 \\\\\nWrite A=11                    & \\textit{Completed}         & A1=11, A15=20 \\\\\n\\textit{Completed}            & ~                          & A1=11, A15=20 \\\\\n\\end{tabular}\n\\caption[Concurrent requests]{Concurrent requests: the snapshot instant is 15, the left request accesses data previous to the snapshot (A1) while the right accesses the latest (A15 or A1). }\n\\label{tab:snapshot_caso_bicudo}\n\\end{table}\n\n\n%Discussion\nUnlike the approach proposed by Kim and Park, our approach allows to record multiple snapshots keeping various data item versions and does not require to to copy the transactions.\n\nThe value of \\acf{SID} must be known by every database instance before the execution of any request with $RID > SID$. If the \\ac{RID} was determined by incremental request counter, then Shuttle would need to analyze the request rate and estimate the \\ac{SID} value. However, the request rate can vary and the snapshot would fail. Notice that our mechanism does not require any clock synchronization because the \\ac{RID} is defined by the proxy timestamp and tenants can schedule a snapshot defining a future time instant. The period between the scheduled moment and the present must be bigger than the communication delay between the manager and the database instances. Consequently, we assume the communication between the manager and database proxies is synchronous. \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Dependency Graph}\n\\label{sec:arch:dependencies}\n%Dependency definitions\nAn application execution can be modeled as a set of actions and a set of objects. Actions read and write the shared set of objects. An action $A$ is dependent from an action $B$ if $A$ reads an object's version written by $B$.\n\n%why is relevant in general\nRequests must be replayed in a consistent manner to obtain a consistent application after the replay phase. The request replay order must ensure that if the requests, application semantics and initial database values are the same, then the final database values are equal. For this propose, the dependencies between actions shall remain consistent: if during the first execution an action $A$ becomes depends from an action $B$ by an object $O$, then, during the replay phase, $A$ shall read the object $O$ only after $B$ updates the object $O$. Otherwise, $A$ may read a version different than the original version.\n\n%related work and why it does not work in PaaS\nPrevious proposals, for instance \\emph{in} \\cite{goel}, leverage the request serialization provided by snapshot isolation in relational \\ac{DBMS} to order the operations to replay. In contrast, \\textit{Undo for Operators} \\cite{undoForOperators} uses the application protocol knowledge to establish the dependency between requests and order the requests. However, accesses to \\acs{NoSQL} databases are not globally serialized. Moreover, the data items accessed during the replay phase may change due to updates to the application semantic, request modification or multi-threaded execution. At last, the application semantics is unknown in advance since we want to support any application deployed on \\ac{PaaS}. Taking that into account, we propose a novel approach.\\\\\n\n\n%Rules\nShuttle tracks the dependencies between actions in a \\textit{dependency graph}. A \\emph{dependency graph} consists of nodes that represent requests and edges that establish dependencies between them (Figure \\ref{fig:selectiveGraph}).  Dependencies between requests are established using the following rules: a request $R_A$ is dependent upon request $R_B$ if there is a data item $x$ such that $R_A$ reads $x$ and $R_B$ performs the latest update on $x$ before the read operation by $R_A$. Dependencies are transitive except when requests perform blind writes, i.e., requests write items without read them first \\cite{Ammann2002}. Therefore, the dependency graph is a mixed graph, if there is a dependency between $A$ to $B$, then there may be a dependency between $B$ and $A$.\n\n\n%How Shuttle creates the dependency graph?\nPrevious solutions for relational databases extract the dependencies using a pre-defined, manually-created, per-transaction type template \\cite{itdb}, or change the relational database management system code to extract read dependencies \\cite{phoenix}. In contrast, Shuttle uses the database proxy to log the database accesses. Periodically, each database proxy traverses, in background, the \\emph{operation list} of each data item to collect the new accesses and to generate the dependencies between requests. The Shuttle manager processes the dependencies to update the dependency graph. An alternative approach is to pull the dependencies from each database node only before the recovery process and generate the dependency graph when needed. \n\n\n\n\n\n\n%false positives: detected but not exist\nThe above method may lead to \\emph{false positives}, i.e., to flag dependencies that do not exist. For instance, a request may read a data item but not use it to compute the written value, so there is no real dependency. Although tracking variables used by each request during its execution might solve this particular case \\cite{Akkus2010}, it would require modifying the code interpreter (e.g., Zend Engine for PHP), which would constrain Shuttle to a set of specific languages. As our approach uses the dependencies to group the requests that can be executed concurrently, false dependencies imply a performance penalty but do not cause data loss or inconsistent state. On selective replay mode, the dependency graph is used to determine the tainted requests and the request that need to be replayed. Again, false dependencies only harm the performance.\n\nWhen tenants use the dependency graph to determine the set of malicious requests, $A_{malicious}$, they shall take into account that false dependencies may lead to consider legitimate operations as malicious and, consequently, cause data loss.\n\n%false negatives: not detected but exist\nComplex queries on a relational database may lead to \\emph{false negatives}, i.e. a dependency exists but is not detected. For instance when a read operation would have been executed on a deleted data item if this data item had not been deleted before the request execution \\cite{Xie2008}. Therefore, legitimate transactions may have different output even when they were not affected by malicious execution during their original execution. Since user mistakes are often deletes due to wrong query arguments, this is a relevant issue. \n\nIn contrast with SQL queries that access the data items that match a query, the \\ac{CRUD} interface of most key-value stores specifies, in a deterministic and apriori manner, the data item that will be accessed. Shuttle logs every access, even when the data items do not exist, keeping the \\emph{operation list} of the deleted data items to track further operations.\\\\\n\n\n%Cycles\n%Each request may perform multiple database operations, each of them to multiple database servers, without defining a global \\ac{ACID} transaction. \nShuttle can not replay requests synchronously, i.e., waiting for the response to the previous request before sending the next. To replay the requests synchronously would not have only performance degradation but also lock the replay phase because requests, which have been originally executed in concurrently during the normal phase, may be depend from each other. Therefore, Shuttle replays requests asynchronously and, hence, concurrently. Two requests are executed concurrently if they are dependent from each other. For instance, Figure \\ref{fig:inconsistency_db_order} represents the first execution of two requests that increment the variable $A$. The $Request 1$ depends from $Request 2$ and vice versa. \n\n%Ordering using operation list\nYet, re-execution of concurrent requests is not deterministic. User requests are processed concurrently using multi-threaded servers and the system messages, including database requests, do not have a delivering order. Therefore, the execution order of two concurrent requests is unknown. Our novel approach uses the \\emph{operation list} to turn the re-execution of concurrent requests deterministic. An \\emph{operation list} is a sorted list that records the operations to a data item. During the replay phase, the operations to a data item must follow the order established by is operation list. For instance, in Figure \\ref{fig:inconsistency_db_order}, the operation list of the data item $A$ is: $[Req1:Get, Req1:Put, Req2:Get, Req2:Put, Req1:Get, Req1:Put, Req2:Get, Req2:Put]$. {Req.~1} and {req.~2} are replayed concurrently but the result is consistent because the order is established by the operation list.\n\n%Unlocking\nDuring the recovery period, intrusions are removed and the application code is updated. This may cause requests to access different data items than in the first execution. Requests may not access the same sequence of data items or read/write the same content. If an operation contained in the operation list is not performed, the following operations to the data item are blocked and the request fails. To address this problem, at the end of each request execution, the \\textit{database client interceptor} fetches the list of data items accessed by the request on its first execution and compares them against the ones accessed during the replay process. The database client library invokes the \\emph{database proxy} with the keys that have not been accessed to unlock the operations of the remaining requests. \n\nFor instance in Figure \\ref{fig:inconsistency_unlock}, the $Request 1$ has a different replay execution performing $B = B \\times 5$ instead of incrementing $A$. The second operation of {req.~2} is delayed until the end of the {req.~1} because it succeed the second operation of {req.~1} in the operation list. After the execution of {req.~1}, the database client interceptor unlocks the second operation of {req.~2}.\\\\\n\n\\begin{figure}[!htb]\n\\hspace*{-1cm}\n\\mbox{\n  \\subfloat[][Ordered by the operation list \\label{fig:inconsistency_db_order}]{\n      \\includegraphics[width=0.25\\linewidth]{images/inconsistency_db_order}\n  }\n\n  \\subfloat[][Operation unlock \\label{fig:inconsistency_unlock}]{\n      \\includegraphics[width=0.25\\linewidth]{images/inconsistency_unlock}\n  }\n\n  \\subfloat[][Consecutive requests \\label{fig:inconsistency_serial}]{\n      \\includegraphics[width=0.25\\linewidth]{images/inconsistency_serial}\n  }\n\n  \\subfloat[][Conflict \\label{fig:inconsistency_conflict}]{\n      \\includegraphics[width=0.25\\linewidth]{images/inconsistency_conflict}\n  }\n}\n\\caption{Replay two requests with different re-execution}\n\\label{}\n\\end{figure}\n\n\n%New dependencies during the recovery time\nDuring replay there may be non-deterministic situations, whenever an access is not contained in the operation list. The most complex scenario during the replay is when two requests, originally executed in parallel, access different data items comparing with their first execution, establishing a new dependency. The result is unpredictable. Consider the possible re-execution in the Figure \\ref{fig:inconsistency_conflict} where the {req.~2} increments $B$ simultaneously with {req.~1} performing $B = B \\times 5$. The result is unpredictable because the {req.~1} may write before or after {req.~2}. Since both requests did not access the data item $B$ during their first execution, the operation list does not establish an access order. Therefore, the {req.~1} and {req.~2} may execute on a arbitrary order. The order of these requests is as deterministic as if during the first execution: the operation of \\emph{req.~1} can execute before, between or after \\emph{req.~2}.\n\n\n%naive\nA naive solution would be to detect the new dependency during the replay process, stop the process and start a new replay process in a new snapshot, including the new dependency.\n\n%brown\nBrown \\textit{et al.} \\cite{undoForOperators} proposes the concept of \\textit{verb} (Section \\ref{sec:related:recovery_app}). A verb object encapsulates a single interaction (request/response) of the user and exposes an interface to establish the order between requests and their dependencies. However, tenants shall know the applications' operations to create the verbs defining: a commutativity test, an independence test, a preferred-ordering-test and an application-defined action to handle a inconsistency if the operation fails. Since Shuttle shall support any \\ac{PaaS} application, the applications' semantics are unknown in advance. Therefore, this solution is not adequate.\n\n%sorted log\nA sorted-log, in which the accesses are sorted, for instance by \\acf{RID}, would establish that operations must have a strict incremental order. However, operations with smaller \\ac{RID} than the previous are aborted. For instance, the second operation of {req.~2} in Figure \\ref{fig:inconsistency_db_order} would be aborted.\n\n%sorting per start-end\nAn alternative solution consists on sorting the requests per \\emph{start-end order}, instead of using the dependency graph. A request starts only after all requests with end lower than it ends. Dependencies between requests remain correct, since they are constrained by the \\emph{operation list}. Thus the parallel requests are ordered and replayed in a similar manner to the first execution. Two serial requests can have distinct re-executions: if a request starts after the end of the previous. For instance in Figure \\ref{fig:inconsistency_serial}, {req.~1} and {req.~2} can have distinct re-executions.\n\nIf two new operations are re-executed concurrently, then their order is as deterministic as if they happen during the first execution. For instance in Figure \\ref{fig:inconsistency_conflict}, the operation of {req.~1} $B = B \\times 5$ is executed in parallel with the operations $B++$ of {req.~2}. The order of these requests is as deterministic as if during the first execution: the operation of {req.~1} can execute before, between or after {req.~2}.\n\n\n%version and semantic reconciling\nIn order to turn the replay process more consistent with the first execution, we can leverage the semantic reconciliation, as \\textit{in} Dynamo \\cite{Decandia2007}. The case represented in Figure \\ref{fig:inconsistency_conflict} is equivalent to a concurrent update where two parallel writes are performed on distinct database instances. Each request writes a distinct version resulting in conflicting versions of an item. Developers use the application-assisted conflict resolution interface to merge the versions (reconciliation) \\cite{Decandia2007}. In this case, the following read operation would access the values written by the latest operation. For instance, if the latest is {req.~1}, then it choose between $1$ and $2$. If the latest is {req.~2}, then it choose between $1$ and $5$. This solution can produce a consistent output.\\\\\n\nIn summary, unlike previous solutions, Shuttle orders the requests using their start and end instants and constraining the operations to the order established on the \\textit{operation lists}. This approach allows requests to access new data items during the recovery process and to replay concurrent requests.\n\n\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Clustering}\n\\label{sec:arch:clustering}\n\nDespite Shuttle's capability to replay concurrent requests, one of the main challenges of Shuttle is to reduce the recovery period. We assume that critical software flaws and intrusions can be detected in a short period of time, from seconds to one week. If a fault exists during a longer period, then the application may tolerate a longer recovery phase because the recovery process used by Shuttle does not require application downtime (Section \\ref{sec:arch:runtime_recovery}). Still, we want recovery to take a fraction of the time elapsed since the snapshot from which recovery starts (e.g., if the snapshot was taken a week before, we want recovery to take much less than that period).  \n\nWe address this problem grouping the requests into \\emph{clusters}. A cluster is a set of requests that have dependencies between them but not from/to requests in other clusters. Clusters are created when the recovery is about to start by inspecting the dependency graph. Since clusters are independent, they are executed concurrently by different \\emph{replay instance} without synchronization. Requests within the same cluster, are performed in start-end order (Section \\ref{sec:arch:dependencies}). Given that more requests are executed concurrently, Shuttle launches more application servers and database instances to process the replayed requests. Therefore, the replay phase throughput is bigger than the during first execution and the recovery time is minimized. This mechanism is applicable if the graph dependencies remain unchanged during the recovery phase, i.e,. every replayed operation is contained in the operation list but not all operations in the list must be replayed.\n\nTaking the above in account, we define two replay approaches: \\emph{serial replay} and \\emph{parallel replay}. The first considers every request in the same cluster. The later uses the dependency graph to group the requests in independent clusters. Both approaches replay the requests in a start-end order, supporting concurrent requests \\ref{sec:arch:runtime_recovery}. In contrast to \\emph{serial replay}, \\emph{parallel replay} allows to perform more requests in parallel but it does not support new dependencies during the replay phase. Therefore, \\emph{parallel replay} requires that tenants ensure that the dependencies between requests do not change during the replay process. Since the dependencies between requests often remain constant and novel dependencies are easily detected, we consider \\emph{parallel replay} represents a significant advantage for \\acf{CSP}. These approaches are compared in Chapter \\ref{chapter:evaluation}.\n\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Instance Rejuvenation}\n\\label{sec:arch:image_rejuvenation}\n\n% Why? Instances can be corrupted\n\\ac{PaaS} systems launch instances/containers and deploy applications or databases on them. Attackers may exploit vulnerabilities in the instances configuration to affect the service integrity, confidentiality or availability. For instance, an attacker may explore the shellshock vulnerability in the GNU's bash shell of an out of date instances.\n\n%Related work\nAn effective technique to remove intrusion effects and restore the application availability is to terminate compromised containers and launch new containers. We name this approach as \\textit{instance rejuvenation}. A similar approach is used in proactive recovery systems for byzantine fault tolerance. Castro \\textit{et al.} \\cite{Castro2002} proposes a mechanism that recovers the replicas of a system periodically even if there is no reason to suspect that they are faulty. This mechanism aims to prevent an attacker from compromising the service by corrupting a quorum of the replicas without being detected. We extend this approach to \\ac{PaaS} to remove possible intrusion effects in containers, even if there is no reason to suspect that they are affected by the intrusion.\\\\\n\n\n\n%How it works?\nShuttle interacts with the \\ac{PaaS} controller rejuvenate instances when they are compromised and a new recovery process begins. This process launches new instances. The \\ac{PaaS} controller initializes the new instances with updated container images and deploys an updated version of the application code or database, which may include updates to fix discovered flaws or prevent future intrusions. Shuttle copies the snapshot selected by the tenant to new database instances. Requests are replayed on the novel instances while the incoming requests are processed by the old instances, perhaps with a degraded integrity constrains. This mechanism keeps the application available during the recovery process. After the recovery process, the old instances are terminated.\\\\\n\n%Why its good?\nWe assume new instances to be intrusion-free since tenants or \\acf{CSP} can update the image and the image is installed on an empty persistent-state. This approach fits the concept of automatic deployment applications in \\ac{PaaS}. Applications for \\ac{PaaS} platforms are designed to scale horizontally so the number of application instances can be dynamic.\n\n%remote replication\nIn addition, the instances can be instantiated in a remote site to recover from catastrophic disasters \\cite{cloud-disaster}. Snapshots, database operation lists, application code and requests can be replicated to a remote site. If they are available, then Shuttle can launch new instances on a remote datacenter, deploy the application code, load the snapshot and operation lists in the database instances and replay the requests. This is a log-based recovery process \\cite{Wang2010} that allows to recover the  application integrity and availability.\n\n%software testing\nThis process can also be used in a proactive manner to renew instances to remove unknown intrusions \\cite{Castro2002,Sousa2010} or to test new application versions with user requests to compare its results against the previous version, using the branching mechanism  (Section \\ref{sec:arch:runtime_recovery}).\n\n%Consistency\nTenants are responsible for ensuring that request dependencies are correct and the {API} of the updated code version is compatible, or for providing a script to update each request to the new \\ac{API}. Moreover, the selected snapshot must be consistent according to the specification of the updated version or every request executed since the application begin shall be replayed.\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Runtime Recovery}\n\\label{sec:arch:runtime_recovery}\n\n%Goal\nApplications shall remain available during the recovery process, perhaps with a degraded behavior, without exposing downtime to users. To do so, Shuttle considers each recovery process defines a new branch, a model inspired in versioning systems such as git \\cite{git}.\n\n%How\nA \\emph{branch} is a sequence of snapshots. Snapshots are analogous to \\textit{commits} in git. Each snapshot represents a set of versions of every data item in the database at a certain instant. Each recovery process creates a new branch forking a previous snapshot chosen by the tenant, either explicitly or implicitly (by indicating the initial intrusion instant, selecting implicitly the preceding snapshot). When a new branch is created, a new snapshot is also created.Incoming user requests access only the data of the previous branch keeping the application available, while replayed requests access the created branch without compromising the availability of the application. \n\n%Related work, advantages and example\nWhile Aire \\cite{retro} used a branching mechanism to perform a recovery process in various systems simultaneously, we propose the mechanism to isolate user accesses from the recovery process. This model allows the tenants to select any snapshot as base to a new recovery process and create snapshots in different branches. Applications can contain multiple branches simultaneously. Figure \\ref{fig:branches} represents an application with 3 branches: the branch 1 is the initial application branch where the tenant made three snapshots ($A$, $B$ and $C$). After detecting an intrusion, the tenant considered that snapshot $C$ is non-tampered and initiated a recovery process based on it creating the branch 2. Afterwards, the tenant made one snapshot ($D$) on branch 2. However, the snapshot $C$ is tampered. So the tenant initialized a novel recovery process based on snapshot $B$ creating the branch 3. In this scenario, the tenant would be unable to recover its application without the branching model.\\\\\n\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=65mm]{images/branches}\n\\caption[Tree model]{Tree model: 3 branches and 5 snapshots: branch 1 contains the snapshots $A, B, C$; branch 2 contains the snapshot $D$;  branch 3 contains the snapshot $E$.}\n\\label{fig:branches}\n\\end{figure}\n\n%Architecture details\nA branch contains sequence of multiple snapshots but a snapshot can only belong to a single branch. Each snapshot represents a possible version of the data item. A novel data item version is created only when the data item is written for the first time during each snapshot. Consequently, the data item may not have a version for each snapshot. Shuttle keeps a list of the versions in which each database item has been written (Section \\ref{sec:arch:snapshot}).\nIn addition, tenants may fork a new branch not only from the most recent snapshot. Therefore, the latest non-tampered version of a data item may not be its latest version.\n\n%Problem of lack of versions:\nFor instance, in Figure \\ref{fig:branches}, a data item $x$ may have the following sequence of versions on its version list: $[A,B,C,D,E]$. If $x$ has not been written in snapshot $E$, the version $E$ would not exists and the latest version of $x$ would be $D$. However, the snapshot $D$ has been compromised so it is not part of the current branch (branch 3). The latest non-tampered version of $x$ is the version $B$. If version $B$ does not exists, then the latest version is $A$.\n\n%BranchPath\nWe define the concept of \\emph{BranchPath}: a BranchPath of a certain branch is the sequence of non-tampered snapshots between the current snapshot and the root snapshot. A BranchPath of a certain branch defines the versions available to operations that belong to that branch. The BranchPath of branch $3$ in Figure \\ref{fig:branches} is \\{E, B, A\\}. The one of branch $2$ is: \\{D, C, B, A\\}. When a branch is created, its BranchPath contains the its initial snapshot and the sub-sequence of snapshots in the BranchPath of the branch of the forked snapshot that are equal or previous to the forked snapshot.\n\n%Version to read\nThe version accessed by an operation is defined using the BranchPath of the operation's branch and the version list of the accessed data item: operations read the latest version present in the \\emph{version list} and in the \\emph{branch path} and write the latest version in the branch path. Therefore, a new version, referring the initial snapshot of the new branch, is added to the version list on the first write operation to each data item during the replay.\n\n%Isolation\nThis mechanism maps the operations to the correct versions and isolates the multiple, perhaps simultaneous, attempts to recovery the application without compromising the exposed application behavior. During the recovery process, users access the, perhaps corrupted, old branch loaded in the current computation and database instances. Therefore, the application remains online, perhaps with a degraded behavior, without exposing downtime to users.\n\n%Working explanation and switching\nAt recovery time, the manager sends the new \\emph{branch path} to every database instance. The new incoming users access the, perhaps corrupted, old branch while the requests being replace access the new branch. Therefore, the application remains online, perhaps with a degraded behavior, without exposing downtime to users. \n\nAt some point, when the recovery is finishing, the user requests have to start being issued to the new branch. To do so, after replaying the requests, the proxy flag \\emph{restraining} is set and every new request is marked with the \\emph{restrain} flag. Database accesses marked with \\emph{restrain} are delayed. After replaying the requests retrieved during the recovery process, the proxy sets the new branch in the subfield \\emph{branch} of \\ac{SRD} of the new requests, the \\emph{restrain} flag is disabled and the database nodes are notified to proceed the accesses. This mechanism delays the processing of some requests, but this has typically a duration of seconds, compared with a recovery process that may take many minutes or even hours. \\hl{são detalhes a mais que deviam estar no implementation?}\n\n\\hl{podemos fazer replay dos pedidos recebidos durante o recovery process sem o restrain. O restrain apenas tem de acontecer apenas no final ao mudar de branch. É um erro. Nada impede que esses pedidos executem mas simplifica porque senao o processo poderia nunca acabar...}\n\nInactive snapshots and branches, for instance snapshot $D$ and branch 2 in Figure \\ref{fig:branches}, can be deleted to reduce the used storage resources. In addiction, tenants can use the branching mechanism to test their intrusion recovery procedures in background, i.e, without exposing users to test issues.\\\\\n\nIf an intrusion happens during the replay phase, then its effects are stored in the branch of incoming requests. If the intrusion is detected before the restraining flag is set, then the malicious requests are not replayed in the new branch. Otherwise, tenants shall start another recovery process.\\\\\n\nIf Shuttle launches new database instances, then the new branch is created in the new instances and write operations occur in the new instances. Read operations occur in the previous instances until the first write operation of the accessed data item in the new instances.\n\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Non-determinism and consistency}\n\\label{sec:arch:consistency}\n\nShuttle provides an \\ac{API} to handle the nondeterminism and inconsistency cases.\n\n%non-determinism: definition\nAn application is called nondeterministic if two subsequent executions with the same user input cannot be guaranteed to have the same have the same final state and outputs. Five of the main sources of non-determinism in \\ac{PaaS} applications are: shared memory, thread concurrency, random number generation, timestamps and message exchanging.\n\n%how non-determinism is handled\nWe assume requests to be independent thus they do not share memory and concurrent threads are independent. The \\ac{API} provided by Shuttle provides deterministic random number generation and timestamps using the \\acf{RID}, which is a timestamp set by the proxy, as timestamp and pseudo-random number seed, so the replay of a request will use the same random numbers and timestamp. We consider a single timestamp per request to be enough for most applications. This mechanism is language independent. User requests and database accesses are ordered in a deterministic way using the operation list. \\\\\n\n%User consistency\nAn important aspect of a recovery system like Shuttle is the application consistency seen by users. For instance, if an user does an action based on data written by a malicious action, which result of the user action replay is consistent. Since users have a non-deterministic behavior, they may have to be notified if a recovery took place and their data was modified. \\hl{caso do gmail, vale a pena referenciar?}. \\\\\n\n\n%Related work\n%In Undo for Operators \\cite{undoForOperators}, operators must specify a compensation action for each request type. \nSince Shuttle unknowns the application semantics, the actions to compensate the recovery process changes are unknown. In addition, the application may contain client-side code, e.g., Javascript, that processes the application response. For instance, a recover process reorders a list of items. The client-side code may sort the items so the list is seen ordered by users. A replay process taking into account the client-side consistency is proposed in \\cite{warp}.\n\n\n% Compensation API\nShuttle does not execute requests that returned an error in the first execution. We assume that requests are synchronous so users are immediately notified of the error and do not expect that the request will succeed in future. Similarly to other works in the area \\cite{undoForOperators}, we assume that these cases are compensated by the user when they happen. As only requests that did not return an error are replayed, Shuttle considers an inconsistency when a request returns an error or a response is different during replay. Shuttle provides the following \\ac{API} for the application programmer to define how inconsistencies are dealt with (Shuttle calls these functions in case they are launched by the tenant):\n\n\\begin{enumerate}\n  \\item \\textit{preRecover():} invoked before the beginning of the recovery process.\n  \\item \\textit{handleInconstency(request, previous response, new response, previous keys, new keys, action):} invoked when there is an inconsistency.\n  \\item \\textit{postRecover(statistics, old version, new version):} invoked after the end of the recovery process.\n\\end{enumerate}\n\nThe first function allows tenants to perform a set of actions before the beginning of the recovery process, such as notifying the operations team or taking a new snapshot. \nThe second function takes as input the operation that caused the inconsistency as well as the response and keys accessed during the normal execution and during the recovery process. It also takes as argument the action to take. Currently we consider three possible actions: 1) ignore the inconsistency; 2) notify the user of the inconsistency; 3) execute another request. This function is invoked, for instance, if a response during the replay is different than the response on the first request execution.\nUsing the \\textit{postRecover} function, the tenant has access not only to the statistics of the recovery process but also to an interface to compare the database values before and after the recovery process and the application responses, before exposing the data to the users. \nTenants can use this interface to notify their customer to verify their data.\n%If tenants aim to determine if a request returned an error in the first execution due to an intrusion, Shuttle can replay the failed requests too.\n\n%External consistency\nBesides its users, an application may also interact with external services. We simplify the problem by considering that applications only obtain inputs from external services, disregarding the issue of outputs. The problem is treated in \\cite{undoForOperators,aire}. Brown \\textit{et al.} \\cite{Brown_spheres} models each external service as a recoverable application. During the recovery phase, an external service can also be recovered if its input is distinct. Aire \\cite{aire} proposes to initiate a recovery process in the external service and handles the inconsistencies of this process.\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{System Administrator Support}\n\\label{sec:arch:system_admin_support}\n\nShuttle aims to facilitate the recovery process aiding the tenants to recover their applications from intrusions. Shuttle helps the tenant to identify the malicious requests based on: \n\\begin{enumerate}\n\\item tainted responses;\n\\item the requests that accessed a set of data items;\n\\item per user, per user session, per ip-range\n\\end{enumerate}\n%    \\hl{a maquina que foi afectada, tracking do codigo que foi actualizado, etc ha muitos criterios possiveis}.\n\n It also displays the requests dependency graph. It allows the tenant to preview the results of the recovery process without exposing them to the users. It provides a database version compare tool to check if the vulnerability is correctly mitigated.\n\\hl{apago esta secção?}\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\subsection{Selective Replay}\n\\label{sec:arch:selective_replay}\n\n%Full vs selective goals\nWe propose two approaches for intrusion recovery: full replay and selective replay. Full replay consists in replaying every request done after the selected snapshot. Executing many requests can take considerable time, so this approach is adequate for issues detected reasonably fast after they happen, e.g. a few days or weeks.\n\n%Explain\nSelective replay (Section \\ref{sec:related:recovery_models}) re-executes only part of the requests so it is faster but requires that tenants or intrusion detection mechanisms provide a set of malicious requests, $A_{intrusion}$. This set is used to deduce the set of tainted requests $A_{tainted}$. A request is said to be tainted if it is one of the attacker’s requests or if it reads objects written by tainted request \\cite{taser,itdb,phoenix}. \n\n%Tait\nTainted requests can also be determined by Shuttle considering the tampered data items and an estimated intrusion moment. Selective replay approach loads only the previous versions of the tainted objects, $O_{tainted}$, and replays only the legitimate operations, which were tainted, $A_{tainted} \\notin A_{intrusion}$, to update the application persistent state. Selective replay, as compensating actions, does not remove the effects of unlogged actions because their dependencies are unknown. \n\n%related work\nIn \\cite{goel,retro}, the set of tainted operations, $A_{tainted}$, is determined using \\textit{taint propagation via replay}. To do so, they load a previous version, from a snapshot, of the objects in $O_{intrusion}$. Then, the actions, which are dependent from the restored objects, are replayed and their output objects are updated. The forward actions, which depend from the updated objects, are also replayed while their inputs are different from the first execution. The propagation is done thought the output of actions with different execution.\nUnlike these approaches, Shuttle does not store the input and output of every action, i.e., database operation. Shuttle proposes an approach in which the requests are replayed, at least, until the first snapshot after the selected snapshot. Consequently, the application semantic must remain unchanged, i.e., the same request and same input must perform the same write operations. Otherwise, the dependencies between requests are unpredictable and the tainted requests can not be determined. An approach that allows to update the application semantics is proposed in \\cite{warp}. We consider storing all versions of a data item has prohibitive storage costs for enterprise applications.\\\\\n\n%Which requests are replayed?\nFor instance, consider the dependency graph of Figure \\ref{fig:selectiveGraph}, in which every request reads a data item and writes a new value on the same data item. The request $4$ was identified as a malicious request. Therefore, requests $5,6,7,8$ are tainted. Since Shuttle does not keep every version of the entries, the value read by request 4 is unknown. In order to get this value, Shuttle must replay the {req.~2}, which wrote the value read by {req.~4}. The value read by request 2 is known because Shuttle performed the checkpoint A. Since the application semantics remains the same and its input is known, {req.~3} does not need to be replayed. Requests $5,6,7$ are replayed since they depend from the malicious {req.~4}. Values read by request 8 are known due to checkpoint B. Therefore, {req.~8} may not be executed if the value of the data items remains the same. Shuttle performs \\textit{taint via-replay}: if a request writes in a data item which were not written previously, then the requests which read or write that data item, are also replayed. For instance, the {req.~9} may read a data item written by the {req.~4} during the replay but not during its first execution.\\\\\n\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=150mm]{images/selectiveDependency_legended}\n\\caption[Dependency graph]{Dependency graph: $R.1$ is previous to a snapshot $A$; $R.3$ is dependent on $R.2$, which is replayed to get the read values; $R.4$ is a malicious request; $R.5,R.6,R.7$ are tainted; $R.8$ may not be replayed; $R.9$ is independent of the rest}\n\\label{fig:selectiveGraph}\n\\end{figure}\n\nThe selective replay process is as follows:\n\\begin{enumerate}\n\\item \\textit{Determine the malicious requests $A_{intrusion}$.}\nBased on initial data such as user session compromised or data items accessed or other criteria, the tenant determines the requests $A_{intrusion}$ used by the attacker to compromise the application. For instance, $A_{intrusion} = \\{R.4\\} $ in Figure \\ref{fig:selectiveGraph}.\n\n\\item \\textit{Use $A_{intrusion}$ to determine the set of tainted requests $A_{tainted}$.}\nFor each request in $A_{intrusion}$, traverse the dependency graph in causality order and add these nodes to $A_{tainted}$ (in the figure: $A_{tainted} = \\{R.5,R.6,R.7,R.8\\}$).\n\n\n\\item \\textit{Get the requests needed to obtain the values read by $A_{tainted}$ and their effects.} \nInstead of storing the input and output of every action or versions of every data item, we propose to replay the actions which $A_{tainted}$ depends on. The data item value is known at the snapshot instant so the algorithm transverses the graph in inverse causality order from each request in $A_{tainted}$ and stores the requests in $A_{replay}$ ($A_{replay} = \\{R.2\\} \\cup A_{tainted}$). $A_{replay}$ is expanded by traversing the graph from each of its elements on causality order to determine the requests which can be affected by the re-execution of $A_{replay}$ ($A_{replay} = A_{replay} \\cup R.3$). Requests subsequent to the first snapshot after the latest malicious request may not be repeated as the data item version is known (version read by $R.8$ is stored in snapshot B).\n\n\\item \\textit{Determine the replay order.} \nThe set $A_{replay}$ is sorted on non-clustered \\emph{start-end order}.\n\n\\item \\textit{Load the previous data item versions}\nShuttle loads the version in the selected snapshot of the data items read by the requests in $A_{replay}$ and written by $A_{malicious}$.\n\n\\item \\textit{Replay the requests}\nRequests in $A_{replay}$ are replayed. If an access is not contained in operation list, then a new dependency is established and the requests that accessed the data item during the first execution are also replayed as in \\emph{taint propagation via replay} \\cite{retro}. For instance, $R.9$ is replayed if it reads an item written during recovery process but not during normal execution. \n\\end{enumerate}\n\n%merging branches\n%After replaying the tainted requests, Shuttle compares the branches. \\hl{ver se isto é necessário, na prática pode carregar apenas os dados novos}\n% Depois para fazer o merge: compara as branches indo de key em key e comparando o hash dos valores guardados. As combinações são:\n% |  Old  |   Recuperada |\n%    A            A           - (sao iguais) - está tudo bem, um algoritmo de compressão pode colocar ambas as versões a apontar para o mesmo valor\n%    -            B           - (nova entrada) - A versão recuperada ganha\n%    A            B           - (modificado) - A versão recuperada ganha\n\n% As entradas recuperadas escrevem sobre as que existem. Neste caso, os items apagados são também apagados.\n\n\n %A eficacia e melhoramento do selective replay depende do numero de entradas afectadas. Um simulador foi implementado e os resultados sao apresentados nos testes.\n\n Shuttle does not require generating a dependency graph in non-clustered full replay mode. The dependency graph is required in the case of clustered full replay to identify the independent clusters of requests and on selective replay to determine the tainted requests. We use the database operation lists to create the dependency graph and to order the execution of parallel requests without knowledge of the application protocol. \n \n In summary, the selective replay approach reduces the number of requests to be replayed during the recovery process but implies that the application remains unchanged and does not revert the actions performed by unlogged requests. \n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\section{Chapter Summary}\n\\label{sec:arch:summary}\nShuttle recovers from security intrusions loading a previous snapshot and replaying the legitimate requests. It uses database snapshot and clustering to reduce the recovery time. Shuttle leverages the pay-per-usage model of \\ac{PaaS} to provide a cost-efficient and fast recovery service instantiating the replay instances and more application containers on demand during the recovery process. Shuttle proposes two approaches to perform replay: selective replay and full replay. \n\n\\begin{table}[h]\n\\centering\n    \\begin{tabular}{l|ll}\n               & Clustering & Non-Clustering \\\\ \\hline\n    Selective &  \\xmark     &  \\cmark        \\\\\n    Full      &  \\cmark     &  \\cmark             \n    \\end{tabular}\n\\caption{Shuttle Replay modes}\n\\label{tab:operation_types}\n\\end{table}\n\nThe full replay approach supports parallel re-execution of requests that belong to independent clusters. \\hl{que mais devo falar aqui?}\nThe decentralized applications are more vulnerable to failures because of the single proxy architecture. However, we argue that future architectures can consider replication of the proxy, load balancer, Shuttle Storage and database. ",
			"file": "Sections/3.architecture.tex",
			"file_size": 83169,
			"file_write_time": 130675759050000000,
			"settings":
			{
				"buffer_size": 83188,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"uni",
				"Permute Lines: Unique"
			],
			[
				"uniq",
				"Permute Lines: Unique"
			],
			[
				"",
				"About"
			]
		],
		"width": 462.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/darionascimento/Tese/Dissertacao",
		"/Users/darionascimento/Tese/Dissertacao/refs",
		"/Users/darionascimento/Tese/Dissertacao/Sections",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix"
	],
	"file_history":
	[
		"/Users/darionascimento/Tese/Dissertacao/Sections/2.related_work.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/6.performance.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/1.introduction.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/7.Acronim_abreviaturas.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/4.Abstract.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/5.Resumo.tex",
		"/Users/darionascimento/Tese/Dissertacao/images/replayExecution.graffle",
		"/Users/darionascimento/Desktop/apple.txt",
		"/Volumes/DataDisk/cv/cover leters/accenture.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs/database/f_read.eps",
		"/Users/darionascimento/Desktop/maike2.txt",
		"/Users/darionascimento/Tese/Dissertacao/Sections/3.architecture.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/4.implementation.tex",
		"/Users/darionascimento/Tese/Dissertacao/tese.tex",
		"/Users/darionascimento/Desktop/viegas.py",
		"/Users/darionascimento/Tese/Dissertacao/tese.aux",
		"/Users/darionascimento/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/darionascimento/Tese/Dissertacao/Sections/5.accuracy.tex",
		"/Users/darionascimento/Tese/Dissertacao/definitions/packages.tex",
		"/Users/darionascimento/Tese/Dissertacao/definitions/packages.log",
		"/Users/darionascimento/Tese/Dissertacao/Sections/7.conclusion.tex",
		"/Users/darionascimento/Tese/Shuttle_Paper/paper.tex",
		"/Users/darionascimento/Tese/Dissertacao/refs/manual.bib",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/2.Acknowledgments.tex",
		"/Users/darionascimento/Tese/Dissertacao/IEEEtran.bst",
		"/Users/darionascimento/Tese/Dissertacao/graphs/proxy/throughput.eps",
		"/Users/darionascimento/Tese/Dissertacao/01.thesis.cls",
		"/Users/darionascimento/Downloads/trabalho çenas/(2) Clube da Abstinência!.htm",
		"/Users/darionascimento/Tese/compare_last.sh",
		"/Users/darionascimento/Desktop/beaches.txt",
		"/Users/darionascimento/Desktop/mana.txt",
		"/Users/darionascimento/Desktop/review_cv.txt",
		"/Users/darionascimento/Desktop/p.txt",
		"/Users/darionascimento/Desktop/mae/project.sublime-project",
		"/Users/darionascimento/Desktop/ubahn_party.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs/replay/data.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs/scalability/generate.txt",
		"/Users/darionascimento/Tese/Dissertacao/images/inconsistency_conflict.graffle",
		"/Users/darionascimento/Tese/Dissertacao/graphs/requests/comments.eps",
		"/Users/darionascimento/Tese/Dissertacao/images/cap.graffle",
		"/Users/darionascimento/Tese/Dissertacao/graphs/replay/generate.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs/restrain/generate.txt",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix/appendix_results.tex",
		"/Users/darionascimento/Desktop/mae/main.tex",
		"/Users/darionascimento/Tese/Dissertacao/arch/operation_database.graffle",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/7.Acronim_abreviaturas.log",
		"/Users/darionascimento/Tese/Dissertacao/images/inconsistency_unlock.graffle",
		"/Users/darionascimento/Tese/Dissertacao/arch/scheduler_uml.graffle",
		"/Users/darionascimento/Tese/Dissertacao/graphs/TODO/out/database_backup/database_f/read_modify_write.eps",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix/appendix_interface.tex",
		"/Users/darionascimento/Tese/Dissertacao/Sections/0.begin/1.cover.tex",
		"/Users/darionascimento/Tese/Dissertacao/refs/ALL.bib",
		"/Users/darionascimento/Tese/Dissertacao/tese.bbl",
		"/Users/darionascimento/Tese/Dissertacao/images/normalExecution.graffle",
		"/Users/darionascimento/Tese/Dissertacao/graphs/requests/views.eps",
		"/Users/darionascimento/Tese/Dissertacao/images/selectiveDependency_legended.graffle",
		"/Users/darionascimento/Desktop/metroparty.txt",
		"/Users/darionascimento/Tese/Dissertacao/mathtext.sty",
		"/Users/darionascimento/Tese/Dissertacao/refs/before_compression/ALL.bib",
		"/Users/darionascimento/Tese/Dissertacao/graphs/database/b_read.eps",
		"/Users/darionascimento/Tese/Dissertacao/bbm.sty",
		"/Users/darionascimento/Tese/thread_pool_hell.txt",
		"/Users/darionascimento/git/voldemort/src/java/voldemort/undoTracker/map/VersionList.java",
		"/Users/darionascimento/git/voldemort/src/proto/to-manager.proto",
		"/Users/darionascimento/git/voldemort/src/java/voldemort/undoTracker/SRD.java",
		"/Users/darionascimento/git/undo/src/main/resources/from-manager.proto",
		"/Users/darionascimento/git/undo/src/main/java/pt/inesc/replay/core/AssyncExecutionArray.java",
		"/Users/darionascimento/git/voldemort/src/proto/voldemort-client.proto",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix/1app.tex",
		"/Users/darionascimento/git/undo/src/main/resources/AskProto.proto",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix/1app.log",
		"/Users/darionascimento/Tese/Dissertacao/Sections/appendix/appendix_results.log",
		"/Users/darionascimento/Tese/Dissertacao/00.listofsymbols.sty",
		"/Users/darionascimento/Tese/Dissertacao/graphs/restrain/data_clustered.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs/restrain/data_serial.txt",
		"/Users/darionascimento/Desktop/mae/receipts/petitegato.txt",
		"/Users/darionascimento/Desktop/manager/manager2.txt",
		"/Users/darionascimento/Desktop/manager/manager2servers_2clients.txt",
		"/Users/darionascimento/Desktop/manager/manager3.txt",
		"/Users/darionascimento/Desktop/manager/manager4.txt",
		"/Users/darionascimento/Desktop/manager/manager.txt",
		"/Users/darionascimento/Desktop/manager/manager5.txt",
		"/Users/darionascimento/Desktop/manager/manager7.txt",
		"/Users/darionascimento/Desktop/manager/manager8.txt",
		"/Users/darionascimento/Desktop/manager/managerFinal6servers.txt",
		"/Users/darionascimento/Desktop/manager/managerFinal6server2.txt",
		"/Users/darionascimento/Desktop/manager/sortingCorrect.txt",
		"/Volumes/DataDisk/Torrents/Mr Turner 2014 720p BluRay x264-P2P/ReadMe.txt",
		"/Volumes/DataDisk/Torrents/Fury 2014 720p BluRay x264-P2P/ReadMe.txt",
		"/Users/darionascimento/Desktop/mae/receipts/receipts.tex",
		"/Users/darionascimento/Desktop/mae/receipts.tex",
		"/Users/darionascimento/Desktop/lexicum.txt",
		"/Users/darionascimento/Tese/Project/Project.tex",
		"/Users/darionascimento/Desktop/visita.txt",
		"/Users/darionascimento/Tese/Dissertacao/words/lombada.docx",
		"/Users/darionascimento/Tese/Dissertacao/tese.out",
		"/Users/darionascimento/Desktop/memory/versions.txt",
		"/Users/darionascimento/Desktop/memory/voldemort.txt",
		"/Users/darionascimento/Desktop/memory/cassandra.txt",
		"/Users/darionascimento/Desktop/memory/graph.txt",
		"/Users/darionascimento/study/Numbers Everyone Should Know.txt",
		"/Users/darionascimento/Desktop/memory/raw.txt",
		"/Users/darionascimento/Desktop/memory/process.py",
		"/Users/darionascimento/Desktop/data.txt",
		"/Users/darionascimento/Desktop/memory/voldmort2.txt",
		"/Users/darionascimento/Tese/Dissertacao/[no file]",
		"/Users/darionascimento/Desktop/database.txt",
		"/private/var/folders/z8/lmgttxs12b74grxkqw39yg5m0000gn/T/51ee0db3-815a-4d40-ac8d-d72c4bac464b/home/ubuntu/data/data/dock/undoManager/src/main/java/pt/inesc/manager/graph/GraphShuttle.java",
		"/Users/darionascimento/Desktop/manager.txt",
		"/Users/darionascimento/Desktop/manager2.txt",
		"/Users/darionascimento/Desktop/manager2servers_2clients.txt",
		"/Users/darionascimento/Desktop/manager3.txt",
		"/Users/darionascimento/Desktop/manager4.txt",
		"/Users/darionascimento/Desktop/manager5.txt",
		"/Users/darionascimento/Desktop/manager7.txt",
		"/Users/darionascimento/Desktop/manager8.txt",
		"/Users/darionascimento/Desktop/managerFinal6server2.txt",
		"/Users/darionascimento/Desktop/managerFinal6servers.txt",
		"/Users/darionascimento/Tese/Dissertacao/graphs_usage/plot.py",
		"/Users/darionascimento/Tese/Dissertacao/graphs/usage/cpu_app.tex",
		"/Users/darionascimento/Tese/Dissertacao/graphs/usage/cpu_shuttle.tex",
		"/Users/darionascimento/Tese/Dissertacao/graphs_usage/graphs/Maximum_CPUUtilization.tex",
		"/Users/darionascimento/Tese/Dissertacao/graphs/scalability/latencia.tex",
		"/Users/darionascimento/Tese/Dissertacao/graphs_usage/metrics.txt",
		"/Users/darionascimento/Desktop/statistics/process.py",
		"/Users/darionascimento/Desktop/statistics/generate.txt",
		"/Users/darionascimento/Desktop/statistics/plot.py",
		"/Users/darionascimento/Downloads/gnuplot-py-1.8/demo.py"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 95.0,
		"where_history":
		[
			"/Users/darionascimento/Tese/Dissertacao/Sections",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Fig.",
			"API",
			"Available No SQL databases",
			"font",
			"vcpu",
			"sec:arch:selective_replay",
			"\\LONG",
			"\\L",
			"long",
			"\\relax",
			"shell",
			"malicious requests",
			"malicious",
			"and perfor",
			"attack_1_graph",
			"per day",
			"from a node",
			"gami",
			"handler",
			"pos",
			"network parti",
			"\\.[A-Z]",
			"\\.\\w",
			"operation list",
			"approach",
			"replay",
			"billion",
			"716",
			"restrain",
			"\nrestrain",
			"restrain",
			" More,",
			"More,",
			"\ncomissao@senhoranazareencarnacao.pt 	",
			"to	",
			",[a-z]",
			"full replay",
			"HashTable ",
			"Aire creates a new branch",
			"showed that",
			"The [a-z]+s ",
			"The [a-z]+s",
			"There is",
			"It is",
			"comparison",
			"EBS",
			"shuttle scala",
			"proxy ove",
			"proxy overhead",
			"Numberofrequestsperday ",
			"Dependency graph",
			"service arch",
			"Set diagram of the application execution",
			"replay is consistent",
			"user action replay is consistent",
			"DMBS",
			"RAM",
			"c",
			" Shuttle also supports",
			" {HTTPS}",
			"\\ac {HTTPS}",
			" \\ac {HTTPS}",
			" [A-Z]{2,}",
			"RAM",
			" [A-Z]{2,}",
			" SQL ",
			" [A-Z]{2,}",
			" API ",
			" [A-Z]{2,}",
			" HTTPS ",
			" HTTP ",
			" [A-Z]{2,}",
			" SQL ",
			" [A-Z]{2,}",
			"[^{].[A-Z]{2,}",
			"[^{]*[A-Z]{2,}",
			"[^{][A-Z]{2,}",
			" [A-Z]{2,}",
			"[A-Z].",
			"VPC",
			"BDB",
			"QA",
			"Questions",
			"DAG",
			"\\SID|SID\\s",
			"\\sRID|RID\\s",
			"[ ].RID||RID[ ].",
			"[ ]RID||RID[ ]",
			"[ ]*RID[ ]*",
			"RID ",
			" RID",
			" SRD",
			"SRD ",
			"clusters",
			"sec:eval:storage",
			"\\subsection",
			"protobuff",
			"TCP",
			"Brown2003a",
			"Toward",
			"lz4",
			"REST",
			"weighttp",
			"Browna",
			"mapreduce",
			"redis",
			"wildfly",
			"SQL",
			"cloudify",
			"google GoogleAppEngine",
			"soap",
			"actors",
			"CSPs",
			"Thrift",
			"haproxy",
			"Brown2003a",
			"Castro2002",
			"Practical",
			"pratical ",
			"Castro2002",
			"Undo for ",
			"Browna",
			"necessary",
			"checkpoint-survey",
			"checkpoint",
			"global-checkpoint",
			"Akkus2010",
			"Data recovery for web applications"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Figure",
			" Moreover,",
			", ",
			"",
			"hash table",
			"\\ac",
			" \\ac{SQL} ",
			" \\ac{SQL}  ",
			" \\ac{API} ",
			" \\ac{HTTPS} ",
			" \\ac{HTTP} ",
			" \\ac{SQL} ",
			"\\ac{SQL}",
			"goel",
			"  ",
			"\\acs{NoSQL}",
			" sec:eval:storage",
			" \\ac{AWS} ",
			"\\ac{AWS}",
			"data item",
			"database operation",
			"database operations",
			"database operation",
			"",
			"º",
			"data item",
			"launch",
			"Launch",
			"Shuttle Storage",
			"Pedro",
			"Maria",
			"São",
			"de",
			"Igreja de ",
			"Igreja de",
			"Ponte de",
			"application instance",
			"operation list",
			"execution phase",
			"first execution",
			"$O$",
			"$O_",
			" \\ac{PaaS} ",
			"",
			"\n",
			"",
			"// ",
			"",
			"//",
			"",
			"\n",
			"",
			"192.168.1.89",
			"",
			"\n",
			"+",
			"",
			"pool-2-thread-09]",
			"pool-2-thread-08]",
			"pool-2-thread-07]",
			"pool-2-thread-06]",
			"pool-2-thread-05]",
			"pool-2-thread-04]",
			"pool-2-thread-03]",
			"pool-2-thread-02]",
			"pool-2-thread-01]",
			"pool-2-thread-06",
			"",
			" ",
			"           ",
			" ",
			"",
			",",
			"",
			"operation list",
			"operation",
			"traverse",
			"KeyMapEntry",
			"keyMapEntry",
			"Replay",
			"replay",
			"Replay",
			"replay",
			"Replay",
			"replay",
			"Snapshot",
			"snapshot",
			"KeyMap",
			"}{",
			"sid",
			"BranchPath",
			"proxy",
			"}{",
			" ",
			"\\Letv{",
			"\\;",
			";\\",
			"Tainting \\newline via replay",
			"chose",
			"{req.~2}",
			"{req.~1}",
			"",
			"best.tecnico.ulisboa.pt",
			"http://best.tecnico.ulisboa.pt",
			"http://best.tecnico.ulisboa.pt/",
			",\n(",
			"best.tecnico.ulisboa.pt",
			"@best.tecnico.ulisboa.pt",
			"http://best.tecnico.ulisboa.pt",
			"best.tecnico.ulisboa.pt",
			",\n(",
			",(\n",
			"best.tecnico.ulisboa.pt"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Sections/3.architecture.tex",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 83188,
						"regions":
						{
						},
						"selection":
						[
							[
								13992,
								13992
							]
						],
						"settings":
						{
							"WordCountShouldRun": true,
							"WordCountSyntax": "latex",
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/LaTeX/LaTeX.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2909.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 207.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"project": "sublime.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"3",
				"Sections/3.architecture.tex"
			],
			[
				"abre",
				"Sections/0.begin/7.Acronim_abreviaturas.tex"
			],
			[
				"1",
				"Sections/1.introduction.tex"
			],
			[
				"resu",
				"Sections/0.begin/5.Resumo.tex"
			],
			[
				"tese.tex",
				"tese.tex"
			],
			[
				"6",
				"Sections/6.performance.tex"
			],
			[
				"pack",
				"definitions/packages.tex"
			],
			[
				"5.",
				"Sections/5.accuracy.tex"
			],
			[
				"4",
				"Sections/4.implementation.tex"
			],
			[
				"7",
				"Sections/7.conclusion.tex"
			],
			[
				"tese.ex",
				"tese.tex"
			],
			[
				"5",
				"Sections/5.accuracy.tex"
			],
			[
				"acr",
				"Sections/0.begin/7.Acronim_abreviaturas.tex"
			],
			[
				"ack",
				"Sections/0.begin/2.Acknowledgments.tex"
			],
			[
				"acknowledgments",
				"Sections/0.begin/2.Acknowledgments.tex"
			],
			[
				"intro",
				"Sections/1.introduction.tex"
			],
			[
				"arch",
				"Sections/3.architecture.tex"
			],
			[
				"2",
				"Sections/2.related_work.tex"
			],
			[
				"abstra",
				"Sections/0.begin/4.Abstract.tex"
			],
			[
				"conc",
				"Sections/7.conclusion.tex"
			],
			[
				"apre",
				"Sections/appendix/appendix_results.tex"
			],
			[
				"tese.e",
				"tese.tex"
			],
			[
				"abr",
				"Sections/0.begin/7.Acronim_abreviaturas.tex"
			],
			[
				"appen",
				"Sections/appendix/appendix_interface.tex"
			],
			[
				"acc",
				"Sections/5.accuracy.tex"
			],
			[
				"related_work.tex",
				"Sections/2.related_work.tex"
			],
			[
				"manua",
				"refs/manual.bib"
			],
			[
				"all",
				"refs/ALL.bib"
			],
			[
				"tese.te",
				"tese.tex"
			],
			[
				"appendix_interface",
				"Sections/appendix/appendix_interface.tex"
			],
			[
				"pac",
				"definitions/packages.tex"
			],
			[
				"packa",
				"definitions/packages.tex"
			],
			[
				"appendix",
				"Sections/appendix/1app.tex"
			],
			[
				"res",
				"Sections/0.begin/5.Resumo.tex"
			],
			[
				"",
				"Sections/6.performance.tex"
			],
			[
				"absta",
				"Sections/0.begin/4.Abstract.tex"
			],
			[
				"1.",
				"Sections/1.introduction.tex"
			],
			[
				"2.",
				"Sections/2.related_work.tex"
			],
			[
				"ab",
				"Sections/0.begin/4.Abstract.tex"
			],
			[
				"abs",
				"Sections/0.begin/4.Abstract.tex"
			],
			[
				"app",
				"Sections/appendix/appendix_results.tex"
			],
			[
				"gene",
				"graphs/generate.sh"
			],
			[
				"app_",
				"Sections/appendix/appendix_results.tex"
			],
			[
				"perfe",
				"Sections/6.performance.tex"
			],
			[
				"int",
				"Sections/1.introduction.tex"
			],
			[
				"abst",
				"Sections/0.begin/4.Abstract.tex"
			],
			[
				"4.",
				"Sections/4.implementation.tex"
			],
			[
				"pak",
				"definitions/packages.tex"
			],
			[
				"5.a",
				"Sections/5.accuracy.tex"
			],
			[
				"tese.t",
				"tese.tex"
			],
			[
				"packag",
				"definitions/packages.tex"
			],
			[
				"packages",
				"definitions/packages.log"
			],
			[
				"pa",
				"definitions/packages.log"
			],
			[
				"manu",
				"refs/manual.bib"
			],
			[
				"abrev",
				"Sections/0.begin/7.Acronim_abreviaturas.tex"
			],
			[
				"package",
				"definitions/packages.tex"
			],
			[
				"3.",
				"Sections/3.architecture.tex"
			],
			[
				"introdu",
				"Sections/1.introduction.tex"
			],
			[
				"ma",
				"mathtext.sty"
			],
			[
				"tes",
				"tese.aux"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"~/Tese/Shuttle_Paper/paper.sublime-project"
			],
			[
				"pa",
				"~/Tese/Shuttle_Paper/paper.sublime-project"
			],
			[
				"paper",
				"~/Tese/Shuttle_Paper/paper.sublime-project"
			],
			[
				"t",
				"~/Tese/Shuttle_Paper/paper.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
